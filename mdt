#!/bin/sh
# https://github.com/basilioss/mdt

# Configuration ################################

dir="${MDT_DIR}"
inbox="${MDT_INBOX}"
color="${MDT_MAIN_COLOR:-5}"
prompt="${MDT_PROMPT-◆}"
cursor="${MDT_CURSOR:-➔}"
item_width="${MDT_ITEM_WIDTH:-75}"
width="${MDT_WIDTH:-65}"

################################################

_me="${0##*/}"

print_help()
{
  printf %s "\
${_me} - simple todo app on top of plain markdown files

Usage
  ${_me} [-d|--dir <arg>] [-i|--inbox <arg>] [--color <arg>]
  [--prompt <arg>] [--cursor <arg>] [--item-width <arg>]
  [--width <arg>] [-h|--help]

Options
  -d, --dir           Path to the todos directory
  -i, --inbox         Path to the inbox note
  -h, --help          Print help
"
exit 0
}

parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "${_key}" in
			-d|--dir) dir="$2" && shift ;;
			--dir=*) dir="${_key##--dir=}" ;;
			-i|--inbox) inbox="$2" && shift ;;
			--inbox=*) inbox="${_key##--inbox=}" ;;
			--color) color="$2" && shift ;;
			--color=*) color="${_key##--color=}" ;;
			--prompt) prompt="$2" && shift ;;
			--prompt=*) prompt="${_key##--prompt=}" ;;
			--cursor) cursor="$2" && shift ;;
			--cursor=*) cursor="${_key##--cursor=}" ;;
			--item-width) item_width="$2" && shift ;;
			--item-width=*) item_width="${_key##--item-width=}" ;;
			--width) width="$2" && shift ;;
			--width=*) width="${_key##--width=}" ;;
			-h|--help) print_help ;;
			*) die "Got an unexpected argument '$1'" ;;
		esac
		shift
	done
}

get_file_name() {
  # Search recursively for files that have todo items.
  # Exclude hidden directories.
  cd "${dir}" && grep -lR --exclude-dir=".*" \
    "^[[:space:]]*- \[.\]" \
    | gum filter --no-strict \
    --indicator="${cursor}" \
    --prompt="${prompt} " \
    --indicator.foreground="${color}" \
    --match.foreground="${color}"
}

list_open_todos() {
  _note="$1"
  [ -z "${_note}" ] && exit || _note="${dir}/${_note}"

  if ! grep -q "\- \[ \]" "${_note}" 2> /dev/null; then
    printf "%s\n" "Yey, nothing left to do" && exit
  fi

  selected_items="$(grep "\- \[ ] " "${_note}" \
    | sed 's/^[[:space:]]*- \[ \]//g' \
    | gum choose --no-limit \
    --item.width="${item_width}" \
    --cursor="${cursor} " \
    --cursor.foreground="${color}" \
    --selected.foreground="${color}" \
    --cursor-prefix "[ ] " \
    --selected-prefix "[✓] " \
    --unselected-prefix "[ ] ")"

  [ -z "${selected_items}" ] && exit

  printf "%s\n" "${selected_items}" | while read -r item; do
    escaped_item=$(printf '%s\n' "${item}" | sed 's/[*[\/&]/\\&/g')
    sed -i "s/\[ \] ${escaped_item}/\[x\] ${escaped_item}/g" "${_note}"
  done
}

add_todo() {
  _note="$1"
  [ -z "${_note}" ] && exit || _note="${dir}/${_note}"

  if [ ! -f "${_note}" ]; then
    gum confirm \
      --selected.background="${color}" \
      --selected.foreground="#ffffff" \
      --prompt.padding="0 2" \
      "File does not exist, create?"
    if [ $? -eq 0 ]; then
      printf "%s\n\n" "# ${_note}" > "${_note}.md"
      _note="${_note}.md"
    else
      exit
    fi
  fi

  _line="$(grep --line-number --extended-regexp \
    "\- \[.?]" "${_note}" | cut -d: -f1 | head -1)"
  _todo="$(gum input --prompt="${prompt} " \
    --placeholder "Got something to do?" --width "${width}")"

  [ -z "${_todo}" ] && exit
  if [ -z "${_line}" ]; then
    printf "%s\n" "- [ ] ${_todo}" >> "${_note}"
  else
    sed -i "${_line}i - [ ] ${_todo}" "${_note}"
  fi
}

edit_todo() {
  _note="$1"
  [ -z "${_note}" ] && exit || _note="${dir}/${_note}"

  cd "${dir}" && _item="$(grep "^[[:space:]]*- \[.\] " "${_note}" \
    | sed -e 's/^[[:space:]]*- \[.\] //' \
    | gum filter \
    --prompt="${prompt} " \
    --indicator="${cursor}" \
    --indicator.foreground="${color}" \
    --match.foreground="${color}" \
    --width="$width")"

  [ -n "${_item}" ] && _todo="$(gum input \
    --prompt="${prompt} " \
    --width "${width}" \
    --value "${_item}")"

  [ -n "${_todo}" ] && sed -i \
    "s|^\([[:space:]]*- \[.\]\) ${_item}$|\\1 ${_todo}|" "${_note}"
}

die() {
  printf 'Error: %s.\n' "$1" >&2
  exit 1
}

main() {
  parse_commandline "$@"
  [ -d "$dir" ] || die "No directory specified"
  [ -f "$inbox" ] || die "No inbox specified"

  _choice="$(gum choose \
    --cursor.foreground="${color}" \
    --cursor="${cursor} " \
    "List inbox" "Add inbox" "List" "Add" "Edit")"

  case "${_choice}" in
    "List")
      list_open_todos "$(get_file_name)"
      ;;
    "List inbox")
      list_open_todos "${inbox##*/}"
      ;;
    "Add")
      add_todo "$(get_file_name)"
      ;;
    "Add inbox")
      add_todo "${inbox##*/}"
      ;;
    "Edit")
      edit_todo "$(get_file_name)"
      ;;
  esac
}

main "$@"
