#!/bin/sh
# https://github.com/basilioss/mdt

# Configuration ################################

dir="${MDT_DIR}"
inbox="${MDT_INBOX}"
color="${MDT_MAIN_COLOR:-5}"
prompt="${MDT_PROMPT-◆}"
cursor="${MDT_CURSOR:-➔}"
item_width="${MDT_ITEM_WIDTH:-75}"
width="${MDT_WIDTH:-65}"

################################################

print_help()
{
	printf '%s\n' "Minimal todo app on top of plain markdown files"
  printf "\n"
	printf 'Usage: %s [-d|--dir <arg>] [-i|--inbox <arg>] [--color <arg>]\n\t[--prompt <arg>] [--cursor <arg>] [--item-width <arg>]\n\t[--width <arg>] [-h|--help]\n' "$0"
	printf '  %s\n' "-d, --dir: Path to the todos directory"
	printf '  %s\n' "-i, --inbox: Path to the inbox note"
	printf '  %s\n' "-h, --help: Prints help"
}

parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--dir)
				dir="$2"
				shift
				;;
			--dir=*)
				dir="${_key##--dir=}"
				;;
			-i|--inbox)
				inbox="$2"
				shift
				;;
			--inbox=*)
				inbox="${_key##--inbox=}"
				;;
			--color)
				color="$2"
				shift
				;;
			--color=*)
				color="${_key##--color=}"
				;;
			--prompt)
				prompt="$2"
				shift
				;;
			--prompt=*)
				prompt="${_key##--prompt=}"
				;;
			--cursor)
				cursor="$2"
				shift
				;;
			--cursor=*)
				cursor="${_key##--cursor=}"
				;;
			--item-width)
				item_width="$2"
				shift
				;;
			--item-width=*)
				item_width="${_key##--item-width=}"
				;;
			--width)
				width="$2"
				shift
				;;
			--width=*)
				width="${_key##--width=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			*)
				echo "ERROR: Got an unexpected argument '$1'" && exit 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

[ -z "$dir" ] && echo "ERROR: No directory specified" && exit 1
[ -z "$inbox" ] && echo "ERROR: No inbox specified" && exit 1

choice="$(gum choose \
  --cursor.foreground="${color}" --cursor="${cursor} " \
  "List inbox" "Add inbox" "List" "Add" "Edit")"

case "${choice}" in
  "List")
    cd "${dir}" || exit
    note="$(grep -lR --exclude-dir=".*" "^[[:space:]]*- \[ \]" \
      | gum filter \
      --indicator="${cursor}" \
      --prompt="${prompt} " \
      --indicator.foreground="${color}" \
      --match.foreground="${color}")"

    [ -z "${note}" ] && exit
    if ! grep -q "\- \[ \]" "${note}" 2> /dev/null; then
      echo "Yey, nothing left to do" && exit
    fi

    selected_items="$(grep \
      "\- \[ ] " "${note}" \
      | sed -e 's/^[[:space:]]*- \[ \]//' \
      | gum choose --no-limit --item.width="${item_width}" \
      --cursor="${cursor} " \
      --cursor.foreground="${color}" \
      --selected.foreground="${color}" \
      --cursor-prefix "[ ] " \
      --selected-prefix "[✓] " \
      --unselected-prefix "[ ] ")"

    for item in ${selected_items}; do
      sed -i "s/\[ \] ${item}/\[x\] ${item}/g" "${note}" 2> /dev/null
    done
    ;;
  "List inbox")
    if ! grep -q "\- \[ \]" "${inbox}" 2> /dev/null; then
      echo "Yey, nothing left to do" && exit
    fi

    selected_items="$(grep \
      "\- \[ ] " "${inbox}" \
      | sed -e 's/^[[:space:]]*- \[ \]//' \
      | gum choose --no-limit --item.width="${item_width}" \
      --cursor="${cursor} " \
      --cursor.foreground="${color}" \
      --selected.foreground="${color}" \
      --cursor-prefix "[ ] " \
      --selected-prefix "[✓] " \
      --unselected-prefix "[ ] ")"

    for item in ${selected_items}; do
      sed -i "s/\[ \] ${item}/\[x\] ${item}/g" "${inbox}" 2> /dev/null
    done
    ;;
  "Add")
    cd "${dir}" || exit
    note="$(grep -lR --exclude-dir=".*" "^[[:space:]]*- \[.\]" \
      | gum filter --no-strict \
      --indicator="${cursor}" \
      --prompt="${prompt} " \
      --indicator.foreground="${color}" \
      --match.foreground="${color}")"

    [ -z "${note}" ] && exit
    if [ ! -f "${note}" ]; then
      gum confirm \
        --selected.background="${color}" \
        --selected.foreground="#ffffff" \
        --prompt.padding="0 2" \
        "File does not exist, create?"
      if [ $? -eq 0 ]; then
        printf "%s\n\n" "# ${note}" > "${note}.md"
        note="${note}.md"
      else
        exit
      fi
    fi

    line="$(grep --line-number --extended-regexp \
      "\- \[.?]" "${note}" | cut -d: -f1 | head -1)"
    todo="$(gum input --prompt="${prompt} " \
      --placeholder "Got something to do?" --width "${width}")"

    [ -z "${todo}" ] && exit
    if [ -z "${line}" ]; then
      echo "- [ ] ${todo}" >> "${note}"
    else
      sed -i "${line}i - [ ] ${todo}" "${note}"
    fi
    ;;
  "Add inbox")
    line="$(grep --line-number --extended-regexp \
      "\- \[.?]" "${inbox}" | cut -d: -f1 | head -1)"
    todo="$(gum input --prompt="${prompt} " \
      --placeholder "Got something to do?" --width "${width}")"
    [ -n "$todo" ] && sed -i "${line}i - [ ] ${todo}" "${inbox}"
    ;;
  "Edit")
    cd "${dir}" || exit
    note="$(grep -lR --exclude-dir=".*" "^[[:space:]]*- \[.\]" \
      | gum filter \
      --indicator="${cursor}" \
      --prompt="${prompt} " \
      --indicator.foreground="${color}" \
      --match.foreground="${color}")"

    [ -n "${note}" ] && item="$(grep \
      "^[[:space:]]*- \[.\] " "${note}" \
      | sed -e 's/^[[:space:]]*- \[.\] //' \
      | gum choose --item.width="${item_width}" \
      --cursor="${cursor} " \
      --cursor.foreground="${color}" \
      --selected.foreground="${color}")"

    [ -n "${item}" ] && todo="$(gum input \
      --prompt="${prompt} " --width "${width}" --value "${item}")"

    [ -n "${todo}" ] && sed -i \
      "s|^\([[:space:]]*- \[.\]\) ${item}$|\\1 ${todo}|" "${note}"
    ;;
esac
